$(function(){$('[data-toggle="tooltip"]').tooltip()});const SCM=function(){};SCM.prototype.selectAndServe=function(t,o,e=!1){let n=document.querySelector(t);e?n.append(o):n.textContent=o},SCM.prototype.evaluate=function(t,o=!1){try{t()}catch(t){console.log("ERROR:",t.message),o&&this.selectAndServe(o,t.message)}},SCM.prototype.isType=function(t,o,e){if(("array"!==e||"Array"!==o.constructor.name)&&typeof o!==e)throw"Array"===o.constructor.name?{message:`${t} is not of type ${e}. It is of type ${o.constructor.name.toLowerCase()}`}:{message:`${t} is not of type ${e}. It is of type ${typeof o}.`}},SCM.prototype.isString=function(t,o){this.isType(t,o,"string")},SCM.prototype.isNumber=function(t,o){this.isType(t,o,"number")},SCM.prototype.isBoolean=function(t,o){this.isType(t,o,"boolean")},SCM.prototype.isArray=function(t,o){this.isType(t,o,"array")},SCM.prototype.isObject=function(t,o){this.isType(t,o,"object")},SCM.prototype.isFunction=function(t,o){this.isType(t,o,"function")},SCM.prototype.isBlockScope=function(t,o){if(void 0!==window[t])throw{message:`${t} is not block scoped.`};return!1},SCM.prototype.isNotBlockScope=function(t,o){if(void 0===window[t])throw{message:`${t} is block scoped.`};return!1},SCM.prototype.correctLength=function(t,o,e){if(o.length>e)throw{message:`${t} is too long. It should be a length of ${e}`};if(o.length<e)throw{message:`${t} is too short. It should be a length of ${e}`};return!0},SCM.prototype.test=function(t,o,e,n){if(t&&this.selectAndServe(n,o),!t)throw{message:e}};const scm=new SCM;